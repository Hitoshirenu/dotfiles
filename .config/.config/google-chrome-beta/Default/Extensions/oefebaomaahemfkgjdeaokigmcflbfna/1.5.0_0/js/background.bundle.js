(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";var __awaiter=function(a,b,c,d){return new(c||(c=Promise))(function(e,f){function g(a){try{i(d.next(a))}catch(a){f(a)}}function h(a){try{i(d["throw"](a))}catch(a){f(a)}}function i(a){a.done?e(a.value):new c(function(b){b(a.value)}).then(g,h)}i((d=d.apply(a,b||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const weather_1=require("./ts/weather"),messaging_1=require("./ts/messaging"),cache_1=require("./ts/weather/cache");function handleCMessage(a,b){return __awaiter(this,void 0,void 0,function*(){switch(a.type){case messaging_1.CMessageType.TimeRequest:{b(Date.now());break}case messaging_1.CMessageType.WeatherRequest:{const c=a,d=cache_1.getCachedCurrentWeatherRequestResponse(c);if(d)b(d);else{const a=yield weather_1.getCurrentWeather(c);cache_1.setCachedCurrentWeatherRequestResponse(c,a),b(a)}break}default:{console.error("Unhandled request type: ",a.type),b(null);break}}})}chrome.runtime.onMessage.addListener(function(a,b,c){return messaging_1.isCMessage(a)?(handleCMessage(a,c),!0):(c("<<BAD MESSAGE>>"),!1)});

},{"./ts/messaging":3,"./ts/weather":8,"./ts/weather/cache":5}],2:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.WEATHER_API_VERSION=1,exports.FONT_SIZE_MIN=8,exports.FONT_SIZE_MAX=72,exports.SD_SECTION_WIDTH_MIN=1,exports.SD_SECTION_WIDTH_MAX=16,exports.SD_ITEM_WIDTH_MIN=32,exports.SD_ITEM_WIDTH_MAX=1024;

},{}],3:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var CMessageType;(function(a){a[a.WeatherRequest=0]="WeatherRequest",a[a.TimeRequest=1]="TimeRequest"})(CMessageType=exports.CMessageType||(exports.CMessageType={}));class CTimeRequest{constructor(){this.type=CMessageType.TimeRequest}}exports.CTimeRequest=CTimeRequest;function isCMessage(a){return a&&"number"==typeof a.type}exports.isCMessage=isCMessage;function sendTypedMessageCB(a){let b,c;if(2===arguments.length)b=void 0,c=arguments[1];else if(3===arguments.length)b=arguments[1],c=arguments[2];else throw new Error("Wrong number of arguments passed to sendTypedMessageCB.");b?chrome.runtime.sendMessage(a,b,(a)=>{c(a)}):chrome.runtime.sendMessage(a,(a)=>{c(a)})}exports.sendTypedMessageCB=sendTypedMessageCB;function sendTypedMessage(a,b){return new Promise((c)=>{b?sendTypedMessageCB(a,b,c):sendTypedMessageCB(a,c)})}exports.sendTypedMessage=sendTypedMessage;

},{}],4:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class _MStorage{constructor(a){this.prefix=a}set(a,b){const c=JSON.stringify(b);localStorage.setItem(`${this.prefix}:${a}`,c)}get(a){const b=localStorage.getItem(`${this.prefix}:${a}`);if(b)try{return JSON.parse(b)}catch(b){console.error(`Error while parsing JSON for item "${this.prefix}:${a}"`,b),localStorage.removeItem(`${this.prefix}:${a}`)}}ttlSet(a,b,c){const d={storedTime:Date.now(),expiresIn:b};this.set(a,c),this.set(a+"::~ttl",d)}ttlGet(a){const b=this.get(a+"::~ttl");if(b){const c=Date.now();if(c>b.storedTime+b.expiresIn)return void this.ttlRemove(a)}return this.get(a)}ttlGetWithTTL(a){const b=this.get(a+"::~ttl");if(b){const c=Date.now();if(c>b.storedTime+b.expiresIn)return this.ttlRemove(a),[void 0,b]}return[this.get(a),b]}ttlRemove(a){this.remove(a+"::~ttl"),this.remove(a)}getRaw(a){const b=localStorage.getItem(`${this.prefix}:${a}`);return b?b:void 0}remove(a){localStorage.removeItem(`${this.prefix}:${a}`)}}exports._MStorage=_MStorage,exports.default=new _MStorage("minimal");

},{}],5:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const index_1=require("./index"),storage_1=require("../storage"),WEATHER_REQUEST_LS_KEY="weather.cache.request",WEATHER_RESPONSE_LS_KEY="weather.cache.response",WEATHER_REQUEST_CACHE_TIME=1800000;function getCachedCurrentWeatherRequestResponse(a){const[b,c]=storage_1.default.ttlGetWithTTL(WEATHER_REQUEST_LS_KEY);if(b&&c){const c=new index_1.CurrentWeatherRequest(b);return c.equals(a)?storage_1.default.get(WEATHER_RESPONSE_LS_KEY):void 0}}exports.getCachedCurrentWeatherRequestResponse=getCachedCurrentWeatherRequestResponse;function setCachedCurrentWeatherRequestResponse(a,b){storage_1.default.ttlSet(WEATHER_REQUEST_LS_KEY,WEATHER_REQUEST_CACHE_TIME,a),storage_1.default.set(WEATHER_RESPONSE_LS_KEY,b)}exports.setCachedCurrentWeatherRequestResponse=setCachedCurrentWeatherRequestResponse;

},{"../storage":4,"./index":8}],6:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var WeatherUnits;(function(a){a[a.SI=0]="SI",a[a.Imperial=1]="Imperial"})(WeatherUnits=exports.WeatherUnits||(exports.WeatherUnits={}));var WeatherIcon;(function(a){a.ClearDay="sw-01",a.ClearNight="sw-02",a.RainDay="sw-12",a.SnowDay="sw-14",a.SleetDay="sw-16",a.WindDay="sw-40",a.Fog="sw-10",a.Cloudy="sw-06",a.PartlyCloudyDay="sw-03",a.PartlyCloudyNight="sw-07"})(WeatherIcon=exports.WeatherIcon||(exports.WeatherIcon={}));

},{}],7:[function(require,module,exports){
"use strict";var __awaiter=function(a,b,c,d){return new(c||(c=Promise))(function(e,f){function g(a){try{i(d.next(a))}catch(a){f(a)}}function h(a){try{i(d["throw"](a))}catch(a){f(a)}}function i(a){a.done?e(a.value):new c(function(b){b(a.value)}).then(g,h)}i((d=d.apply(a,b||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const common_1=require("./common");var DSWeatherUnit;(function(a){a.Auto="auto",a.Canada="ca",a.UK="uk2",a.Imperial="us",a.SI="si"})(DSWeatherUnit=exports.DSWeatherUnit||(exports.DSWeatherUnit={}));var DSWeatherIcon;(function(a){a.ClearDay="clear-day",a.ClearNight="clear-night",a.Rain="rain",a.Snow="snow",a.Sleet="sleet",a.Wind="wind",a.Fog="fog",a.Cloudy="cloudy",a.PartlyCloudyDay="partly-cloudy-day",a.PartlyCloudyNight="partly-cloudy-night"})(DSWeatherIcon=exports.DSWeatherIcon||(exports.DSWeatherIcon={}));var DSAlertSeverity;(function(a){a.Advisory="advisory",a.Watch="watch",a.Warning="warning"})(DSAlertSeverity=exports.DSAlertSeverity||(exports.DSAlertSeverity={}));const DSSupportedLanguages=["ar","az","be","bg","bs","ca","cs","de","el","en","es","et","fr","hr","hu","id","it","is","kw","nb","nl","pl","pt","ru","sk","sl","sr","sv","te","tr","uk","x-pig-latin","zh","zh-tw"];function isDSResponse(a){return a&&"object"==typeof a&&a.hasOwnProperty("latitude")&&a.hasOwnProperty("longitude")&&a.hasOwnProperty("timezone")}exports.isDSResponse=isDSResponse;class DarkSkyAPI{constructor(a){this.key=a}forcast(a){return __awaiter(this,void 0,void 0,function*(){const b={};a.exclude&&(b.exclude=a.exclude.join(",")),a.extend&&(b.extend=a.extend),a.language&&(b.lang=a.language),a.units&&(b.units=a.units);const c=Object.keys(b).reduce((a,c,d)=>{const e=encodeURIComponent(c),f=encodeURIComponent(b[c]);return a+(0<d?`&${e}=${f}`:`${e}=${f}`)},`https://api.darksky.net/forecast/${this.key}/${a.latitude},${a.longitude}?`),d=yield fetch(c,{method:"GET"}).then((a)=>a.json());if(isDSResponse(d))return d;throw new Error("Received a bad weather response.")})}}exports.DarkSkyAPI=DarkSkyAPI;class DSWeatherService{constructor(a){this.api=new DarkSkyAPI(a)}convertToDSUnits(a){switch(a){case common_1.WeatherUnits.SI:return DSWeatherUnit.SI;case common_1.WeatherUnits.Imperial:default:return DSWeatherUnit.Imperial;}}convertDSIconToMIcon(a){if(a)switch(a){case DSWeatherIcon.ClearDay:return common_1.WeatherIcon.ClearDay;case DSWeatherIcon.ClearNight:return common_1.WeatherIcon.ClearNight;case DSWeatherIcon.Rain:return common_1.WeatherIcon.RainDay;case DSWeatherIcon.Snow:return common_1.WeatherIcon.SnowDay;case DSWeatherIcon.Sleet:return common_1.WeatherIcon.SleetDay;case DSWeatherIcon.Wind:return common_1.WeatherIcon.WindDay;case DSWeatherIcon.Fog:return common_1.WeatherIcon.Fog;case DSWeatherIcon.Cloudy:return common_1.WeatherIcon.Cloudy;case DSWeatherIcon.PartlyCloudyDay:return common_1.WeatherIcon.PartlyCloudyDay;case DSWeatherIcon.PartlyCloudyNight:return common_1.WeatherIcon.PartlyCloudyNight;}return common_1.WeatherIcon.Cloudy}getCurrentForecast(a,b,c){return __awaiter(this,void 0,void 0,function*(){const d=yield this.api.forcast({latitude:b,longitude:c,units:this.convertToDSUnits(a),exclude:["daily","hourly","minutely","alerts"]});if(!d.currently)throw new Error("Error while getting DarkSky Weather. No current weather info.");return{temp:d.currently.temperature,highTemp:d.currently.temperatureHigh,lowTemp:d.currently.temperatureLow,icon:this.convertDSIconToMIcon(d.currently.icon),units:a,summary:d.currently.summary,created:Date.now()}})}}exports.DSWeatherService=DSWeatherService;

},{"./common":6}],8:[function(require,module,exports){
"use strict";var __awaiter=function(a,b,c,d){return new(c||(c=Promise))(function(e,f){function g(a){try{i(d.next(a))}catch(a){f(a)}}function h(a){try{i(d["throw"](a))}catch(a){f(a)}}function i(a){a.done?e(a.value):new c(function(b){b(a.value)}).then(g,h)}i((d=d.apply(a,b||[])).next())})};Object.defineProperty(exports,"__esModule",{value:!0});const darksky_1=require("./darksky"),messaging_1=require("../messaging"),constants_1=require("../constants");var WeatherServiceType;(function(a){a[a.DarkSky=0]="DarkSky"})(WeatherServiceType=exports.WeatherServiceType||(exports.WeatherServiceType={}));class CurrentWeatherRequest{constructor(a){this.type=messaging_1.CMessageType.WeatherRequest,this.latitude=a.latitude,this.longitude=a.longitude,this.units=a.units,this.service=a.service,this.meta=a.meta,this.version="number"==typeof a.version?a.version:constants_1.WEATHER_API_VERSION}equals(a){return this.version===a.version&&this.latitude===a.latitude&&this.longitude===a.longitude&&this.units===a.units&&this.service===a.service&&this.meta.apiKey===a.meta.apiKey}}exports.CurrentWeatherRequest=CurrentWeatherRequest;function getCurrentWeather(a){return __awaiter(this,void 0,void 0,function*(){switch(a.service){case WeatherServiceType.DarkSky:{if(!a.meta.apiKey)throw Error("Must provide an API key for Dark Sky.");const b=new darksky_1.DSWeatherService(a.meta.apiKey);return yield b.getCurrentForecast(a.units,a.latitude,a.longitude)}default:throw Error("Bad weather request service type.");}})}exports.getCurrentWeather=getCurrentWeather;

},{"../constants":2,"../messaging":3,"./darksky":7}]},{},[1]);
